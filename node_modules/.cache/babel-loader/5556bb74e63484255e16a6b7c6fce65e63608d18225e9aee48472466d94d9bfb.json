{"ast":null,"code":"var _jsxFileName = \"R:\\\\React\\\\hello-app\\\\Tatvsoft\\\\src\\\\pages\\\\EditUser.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState ,useParams, useEffect} from \"react\";\n// import * as Yup from \"yup\";\n// import { useAuthContext } from \"../context/auth\";\n// import { useNavigate } from \"react-router-dom\";\n// import userService from \"../service/user.service\";\n// import { toast } from \"react-toastify\";\n// import { Grid,TextField ,Button} from \"@mui/material\";\n// import { Formik } from \"formik\";\n\n// function EditUser(){\n\n//     //   useEffect(()=>{\n//     //     getRoles();\n//     //   },[]);\n//     //   useEffect(()=>{\n//     //     if(id){\n//     //         getUserById();\n//     //     }\n//     //   },[id]);\n//       useEffect(()=>{\n//         if(user && roles.length){\n//             const roleId=roles.find((role)=>role.name===user?.role)?.id;\n//             setInitialValueState({\n//                 id:user.id,\n//                 email:user.email,\n//                 lastName:user.lastName,\n//                 firstName:user.firstName,\n//                 roleId,\n//                 password:user.password,\n//             });\n//         }\n//       },[user,roles]);\n\n//       const validationSchema=Yup.object().shape({\n//         email:Yup.string().email(\"Invalid email address format\").required(\"Email is required\"),\n//         firstName:Yup.string().required(\"First Name is required\"),\n//         lastName:Yup.string().required(\"Last Name is required\"),\n//         firstName:Yup.number().required(\"Role is required\"),\n//       });\n\n//       const getRoles=()=>{\n//         userService.getAllRoles().then((res)=>{\n//             if(res){\n//                 setRoles(res);\n//             }\n//         });\n//       };\n//       const getUserById=()=>{\n//         userService.getById(Number(id)).then((res)=>{\n//             if(res){\n//                 setUser(res);\n//             }\n//         });\n//       };\n\n//       const onSubmit=(values)=>{\n//         const updateValue={\n//             ...values,\n//             role:roles.find((r)=>r.id===values.roleId).name,\n//         };\n//         userService.update(updateValue).then((res)=>{\n//             if(res){\n//                 toast.success(\"User update sucessfully\");\n//                 navigate('/user');\n//             }\n//         }).catch((e)=>toast.error(\"User update failed\"));\n//       };\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuthContext } from \"../context/auth\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EditUser() {\n  _s();\n  const authContext = useAuthContext();\n  const [roles, setRoles] = useState([]);\n  const [user, setUser] = useState();\n  const navigate = useNavigate();\n  const initialValues = {\n    id: 0,\n    email: \"\",\n    lastName: \"\",\n    firstName: \"\",\n    roleId: 3\n  };\n  const [initialValueState, setInitialValueState] = useState(initialValues);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    getRoles();\n  }, []);\n  useEffect(() => {\n    if (id) {\n      getUserById();\n    }\n  }, [id]);\n  const getRoles = () => {\n    userService.getAllRoles().then(res => {\n      if (res) {\n        setRoles(res);\n      }\n    });\n  };\n  const getUserById = () => {\n    userService.getById(Number(id)).then(res => {\n      if (res) {\n        setUser(res);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(EditUser, \"NnVIhoY8UJeyc4jJ+70ynUU61eM=\", false, function () {\n  return [useAuthContext, useNavigate, useParams];\n});\n_c = EditUser;\nexport default EditUser;\nvar _c;\n$RefreshReg$(_c, \"EditUser\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useAuthContext","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","EditUser","_s","authContext","roles","setRoles","user","setUser","navigate","initialValues","id","email","lastName","firstName","roleId","initialValueState","setInitialValueState","getRoles","getUserById","userService","getAllRoles","then","res","getById","Number","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["R:/React/hello-app/Tatvsoft/src/pages/EditUser.jsx"],"sourcesContent":["// import React, { useState ,useParams, useEffect} from \"react\";\r\n// import * as Yup from \"yup\";\r\n// import { useAuthContext } from \"../context/auth\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import userService from \"../service/user.service\";\r\n// import { toast } from \"react-toastify\";\r\n// import { Grid,TextField ,Button} from \"@mui/material\";\r\n// import { Formik } from \"formik\";\r\n\r\n\r\n// function EditUser(){\r\n\r\n\r\n//     //   useEffect(()=>{\r\n//     //     getRoles();\r\n//     //   },[]);\r\n//     //   useEffect(()=>{\r\n//     //     if(id){\r\n//     //         getUserById();\r\n//     //     }\r\n//     //   },[id]);\r\n//       useEffect(()=>{\r\n//         if(user && roles.length){\r\n//             const roleId=roles.find((role)=>role.name===user?.role)?.id;\r\n//             setInitialValueState({\r\n//                 id:user.id,\r\n//                 email:user.email,\r\n//                 lastName:user.lastName,\r\n//                 firstName:user.firstName,\r\n//                 roleId,\r\n//                 password:user.password,\r\n//             });\r\n//         }\r\n//       },[user,roles]);\r\n\r\n//       const validationSchema=Yup.object().shape({\r\n//         email:Yup.string().email(\"Invalid email address format\").required(\"Email is required\"),\r\n//         firstName:Yup.string().required(\"First Name is required\"),\r\n//         lastName:Yup.string().required(\"Last Name is required\"),\r\n//         firstName:Yup.number().required(\"Role is required\"),\r\n//       });\r\n\r\n//       const getRoles=()=>{\r\n//         userService.getAllRoles().then((res)=>{\r\n//             if(res){\r\n//                 setRoles(res);\r\n//             }\r\n//         });\r\n//       };\r\n//       const getUserById=()=>{\r\n//         userService.getById(Number(id)).then((res)=>{\r\n//             if(res){\r\n//                 setUser(res);\r\n//             }\r\n//         });\r\n//       };\r\n\r\n//       const onSubmit=(values)=>{\r\n//         const updateValue={\r\n//             ...values,\r\n//             role:roles.find((r)=>r.id===values.roleId).name,\r\n//         };\r\n//         userService.update(updateValue).then((res)=>{\r\n//             if(res){\r\n//                 toast.success(\"User update sucessfully\");\r\n//                 navigate('/user');\r\n//             }\r\n//         }).catch((e)=>toast.error(\"User update failed\"));\r\n//       };\r\n\r\n    \r\n\r\nimport React,{useState,useEffect} from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAuthContext } from \"../context/auth\";\r\nimport { useParams } from \"react-router-dom\";\r\nfunction EditUser(){\r\n  const authContext=useAuthContext();\r\n    const [roles,setRoles]=useState([]);\r\n    const [user,setUser]=useState();\r\n    const navigate=useNavigate();\r\n    const initialValues = {\r\n        id:0,\r\n        email:\"\",\r\n        lastName:\"\",\r\n        firstName:\"\",\r\n        roleId:3,\r\n      };\r\n      const [initialValueState, setInitialValueState] = useState(initialValues);\r\n            const { id } = useParams();\r\n               useEffect(()=>{\r\n        getRoles();\r\n      },[]);\r\n      useEffect(()=>{\r\n        if(id){\r\n            getUserById();\r\n        }\r\n      },[id]);\r\n      const getRoles=()=>{\r\n                userService.getAllRoles().then((res)=>{\r\n                    if(res){\r\n                        setRoles(res);\r\n                    }\r\n                });\r\n              };\r\n              const getUserById=()=>{\r\n                userService.getById(Number(id)).then((res)=>{\r\n                    if(res){\r\n                        setUser(res);\r\n                    }\r\n                });\r\n              };\r\n  return(\r\n    <>\r\n    <h1>User Edit</h1>\r\n    </>\r\n  );\r\n}\r\nexport default EditUser;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAEC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAC9C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,QAAQ,iBAAiB;AAChD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC7C,SAASC,QAAQA,CAAA,EAAE;EAAAC,EAAA;EACjB,MAAMC,WAAW,GAACR,cAAc,CAAC,CAAC;EAChC,MAAM,CAACS,KAAK,EAACC,QAAQ,CAAC,GAACb,QAAQ,CAAC,EAAE,CAAC;EACnC,MAAM,CAACc,IAAI,EAACC,OAAO,CAAC,GAACf,QAAQ,CAAC,CAAC;EAC/B,MAAMgB,QAAQ,GAACd,WAAW,CAAC,CAAC;EAC5B,MAAMe,aAAa,GAAG;IAClBC,EAAE,EAAC,CAAC;IACJC,KAAK,EAAC,EAAE;IACRC,QAAQ,EAAC,EAAE;IACXC,SAAS,EAAC,EAAE;IACZC,MAAM,EAAC;EACT,CAAC;EACD,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGxB,QAAQ,CAACiB,aAAa,CAAC;EACnE,MAAM;IAAEC;EAAG,CAAC,GAAGd,SAAS,CAAC,CAAC;EACvBH,SAAS,CAAC,MAAI;IACrBwB,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAC,EAAE,CAAC;EACLxB,SAAS,CAAC,MAAI;IACZ,IAAGiB,EAAE,EAAC;MACFQ,WAAW,CAAC,CAAC;IACjB;EACF,CAAC,EAAC,CAACR,EAAE,CAAC,CAAC;EACP,MAAMO,QAAQ,GAACA,CAAA,KAAI;IACTE,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAG;MAClC,IAAGA,GAAG,EAAC;QACHjB,QAAQ,CAACiB,GAAG,CAAC;MACjB;IACJ,CAAC,CAAC;EACJ,CAAC;EACD,MAAMJ,WAAW,GAACA,CAAA,KAAI;IACpBC,WAAW,CAACI,OAAO,CAACC,MAAM,CAACd,EAAE,CAAC,CAAC,CAACW,IAAI,CAAEC,GAAG,IAAG;MACxC,IAAGA,GAAG,EAAC;QACHf,OAAO,CAACe,GAAG,CAAC;MAChB;IACJ,CAAC,CAAC;EACJ,CAAC;EACb,oBACExB,OAAA,CAAAE,SAAA;IAAAyB,QAAA,eACA3B,OAAA;MAAA2B,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC,gBAChB,CAAC;AAEP;AAAC3B,EAAA,CAzCQD,QAAQ;EAAA,QACGN,cAAc,EAGfD,WAAW,EASHE,SAAS;AAAA;AAAAkC,EAAA,GAb3B7B,QAAQ;AA0CjB,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}